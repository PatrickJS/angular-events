/* License MIT */

!function(exports,global){"use strict";global["angular-events"]=exports,angular.module("angular-events",[]),angular.module("angular-events").provider("$events",[function(){var publicMembers={},privateMembers={};return publicMembers._eventHash={},privateMembers.counter=0,privateMembers.generateListenerHash=function(){return privateMembers.counter=9007199254740992===privateMembers.counter?0:privateMembers.counter,privateMembers.counter++ +""},privateMembers.execute=function(name,data){var hash;for(hash in publicMembers._eventHash[name])publicMembers._eventHash[name].hasOwnProperty(hash)&&publicMembers._eventHash[name][hash](data)},publicMembers.register=function(name){if(publicMembers._eventHash[name])throw new Error("Event '"+name+"' has already been defined");return publicMembers._eventHash[name]={},this},publicMembers.$get=[function(){return{on:function(name,filter,listener){var hash,type,self=this;if(listener=listener||filter,type=typeof listener,"function"!==type)throw new Error("'on' expected type 'function' for a listener, and instead received type '"+type+"'");if(!publicMembers._eventHash[name])throw new Error("'"+name+"' not found in event registry");return hash=privateMembers.generateListenerHash(),publicMembers._eventHash[name][hash]=function(listener){return function(data){var i,pass=!0;if(typeof filter!=typeof listener)for(i in filter)if(filter.hasOwnProperty(i)&&(pass=filter[i]===data[i],!pass))break;pass&&listener.apply(self,arguments)}}(listener),hash},once:function(name,filter,listener){var hash,type,self=this;if(listener=listener||filter,type=typeof listener,"function"!==type)throw new Error("'once' expected type 'function' for a listener, and instead received type '"+type+"'");if(!publicMembers._eventHash[name])throw new Error("Event '"+name+"' is undefined");return hash=privateMembers.generateListenerHash(),publicMembers._eventHash[name][hash]=function(listener,hash){return function(data){var i,pass=!0;if(typeof filter!=typeof listener)for(i in filter)if(filter.hasOwnProperty(i)&&(pass=filter[i]===data[i],!pass))break;pass&&(listener.apply(self,arguments),self.off(name,hash))}}(listener,hash),hash},off:function(name,hash){if(!publicMembers._eventHash[name])throw new Error("Event '"+name+"' is undefined");if(!hash)throw new Error("'off' expected to be passed a hash and didn't receive one");publicMembers._eventHash[name][hash]&&delete publicMembers._eventHash[name][hash]},emit:function(name,data){if(!publicMembers._eventHash[name])throw new Error("Event '"+name+"' is undefined");privateMembers.execute(name,data)}}}],publicMembers}])}({},function(){return this}());
//# sourceMappingURL=angular-events.min.map